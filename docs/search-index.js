var searchIndex = JSON.parse('{\
"schnorr_zk_dlog":{"doc":"","t":"ADILLLLLLLKLLLKLMMLLLLKL","n":["dlog","DLogProof","DiscreteLogProof","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_points","hash_points","into","new","prove","prove","s","t","to_owned","try_from","try_into","type_id","verify","verify"],"q":[[0,"schnorr_zk_dlog"],[1,"schnorr_zk_dlog::dlog"],[24,"core::fmt"],[25,"core::fmt"],[26,"k256::arithmetic::scalar"],[27,"std::io::error"],[28,"core::result"],[29,"core::marker"],[30,"core::any"]],"d":["This is the main library file for the project.","Represents a Discrete Logarithm (DLOG) proof using the …","Trait that defines a Discrete Logarithm (DLOG) proof using …","","","","","","","Returns the argument unchanged.","Hashes a list of points along with a session ID and …","Hashes a list of points along with a session ID and …","Calls <code>U::from(self)</code>.","Creates a new DLOG proof.","Generates a DLOG proof.","Generates a DLOG proof.","The response value s","The commitment value t","","","","","Verifies a DLOG proof.","Verifies a DLOG proof."],"i":[0,0,0,1,1,1,1,1,1,1,15,1,1,1,15,1,1,1,1,1,1,1,15,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[1,4],5],[-1,-1,[]],[[6,7,[9,[8]]],[[12,[10,11]]]],[[6,7,[9,[8]]],[[12,[10,11]]]],[-1,-2,[],[]],[[8,10],1],[[6,7,10,8,8],[[12,[-1,11]]],13],[[6,7,10,8,8],[[12,[1,11]]]],0,0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[[-1,6,7,8,8],[[12,[3,11]]],[]],[[1,6,7,8,8],[[12,[3,11]]]]],"c":[],"p":[[3,"DLogProof",1],[15,"tuple"],[15,"bool"],[3,"Formatter",24],[6,"Result",24],[15,"str"],[15,"u32"],[3,"ProjectivePoint",25],[15,"slice"],[3,"Scalar",26],[3,"Error",27],[4,"Result",28],[8,"Sized",29],[3,"TypeId",30],[8,"DiscreteLogProof",1]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
